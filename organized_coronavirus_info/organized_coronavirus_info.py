# Necessary import

import pandas as pd
import matplotlib.pyplot as plt
import requests
import json

## Part 1. Functions related to historical Coronavirus data of last 30 days
def obtain_historical_data():
    """
    This is a function to obtain historical data using NovelCOVID API.
    API documentation: https://documenter.getpostman.com/view/11144369/Szf6Z9B3?version=latest#513b0f63-b3ae-4427-9e4d-d3f6937789e9
    Official documentation: https://github.com/disease-sh/API
    Authenticaiton: This API does not require a key and it is an open source.

    Parameters (Inputs)
    ----------

    Returns (Output)
    -------
    list
        A list of dictionary with json format containing data of cases, deaths, and recovered for last 30 days in all countries available

    Examples
    --------
    >>> history = obtain_historical_data()
    >>> type(history)
    list
    """
    r = requests.get("https://corona.lmao.ninja/v2/historical?lastdays=30")
    if r.status_code != 200:
        print('API status !=200, failed')
    elif r.status_code == 200:
        print('API status = 200, sucessful')
    historical_data = r.json() # convert the results to json format
    print(json.dumps(historical_data, indent=2, sort_keys=True))
    return(historical_data)

# 1.1 Historical data of cases in each country
def organized_historical_cases(historical_data):
    """
    This is a function of selecting data related to cases from previously generated historical_data
    It includes convert the type of data to DataFrame and organize data.
    The reason of including groupby and sum() is that some of the raw data is listed for provinces available in that country.
    In order to generate the data with whole country, groupby and sum() is in need.

    Parameters (Inputs)
    ----------
    historical_data : list
        The list of data generated by the first function

    Returns (Output)
    -------
    DataFrame
        A DataFrame containing data of cases for last 30 days for all countries available.

    Examples
    --------
    >>> history = obtain_historical_data()
    >>> cases = organized_historical_cases(history)
    >>> type(cases)
    pandas.core.frame.DataFrame
    """
    df = pd.DataFrame(historical_data)
    list_timeline = df['timeline'].values.tolist()
    timeline = pd.DataFrame(list_timeline)
    list_cases = timeline['cases'].values.tolist()
    cases = pd.DataFrame(list_cases)
    cases['country'] = df['country']
    cases_organized = cases.groupby('country').sum()
    return cases_organized

def plot_organized_historical_cases(cases_organized, query_country):
    """
    This is a function for making time series plot showing how the number of cases for last 30 days changes for the specific countru that the user wants to know.

    Parameters (Inputs)
    ----------
    cases_organized : DataFrame
        The DataFrame generated in previous function containing organized data of cases
    query_country : str
        The specific country the user wants to get information about

    Returns (Output)
    -------
    plot
        A line plot showing how the number of cases changes for last 30 days for the specific country users want to know

    Examples
    --------
    >>> history = obtain_historical_data()
    >>> cases = organized_historical_cases(history)
    >>> country = 'China'
    >>> plot_organized_historical_cases(cases, country)
    will return the line plot
    """
    if query_country in cases_organized.index:
        query_country_df = cases_organized.loc[query_country, :]
        query_country_df.transpose().plot(kind='line', subplots=True)
        return plt.show()
    elif query_country not in cases_organized.index:
        print('Query country is not available')

# 1.2 Historical data of deaths in each country
def organized_historical_deaths(historical_data):
    """
    This is a function of selecting data related to deaths from previously generated historical_data
    It includes convert the type of data to DataFrame and organize data.
    The reason of including groupby and sum() is that some of the raw data is listed for provinces available in that country.
    In order to generate the data with whole country, groupby and sum() is in need.

    Parameters (Inputs)
    ----------
    historical_data : list
        The list of data generated by the first function

    Returns (Output)
    -------
    DataFrame
        A DataFrame containing data of deaths for last 30 days for all countries available.

    Examples
    --------
    >>> history = obtain_historical_data()
    >>> deaths = organized_historical_deaths(history)
    >>> type(deaths)
    pandas.core.frame.DataFrame
    """
    df = pd.DataFrame(historical_data)
    list_timeline = df['timeline'].values.tolist()
    timeline = pd.DataFrame(list_timeline)
    list_deaths = timeline['deaths'].values.tolist()
    deaths = pd.DataFrame(list_deaths)
    deaths['country'] = df['country']
    deaths_organized = deaths.groupby('country').sum()
    return deaths_organized

def plot_organized_historical_deaths(deaths_organized, query_country):
    """
    This is a function for making time series plot showing how the number of deaths for last 30 days changes for the specific countru that the user wants to know.

    Parameters (Inputs)
    ----------
    deaths_organized : DataFrame
        The DataFrame generated in previous function containing organized data of deaths
    query_country : str
        The specific country the user wants to get information about

    Returns (Output)
    -------
    plot
        A line plot showing how the number of deaths changes for last 30 days for the specific country users want to know

    Examples
    --------
    >>> history = obtain_historical_data()
    >>> deaths = organized_historical_deaths(history)
    >>> country = 'China'
    >>> plot_organized_historical_deaths(deaths, country)
    will return the line plot
    """
    if query_country in deaths_organized.index:
        query_country_df = deaths_organized.loc[query_country, :]
        query_country_df.transpose().plot(kind='line', subplots=True)
        return plt.show()
    elif query_country not in deaths_organized.index:
        print('Query country is not available')

# 1.3 Historical data of recovered in each country
def organized_historical_recovered(historical_data):
    """
    This is a function of selecting data related to recovered from previously generated historical_data
    It includes convert the type of data to DataFrame and organize data.
    The reason of including groupby and sum() is that some of the raw data is listed for provinces available in that country.
    In order to generate the data with whole country, groupby and sum() is in need.

    Parameters (Inputs)
    ----------
    historical_data : list
        The list of data generated by the first function

    Returns (Output)
    -------
    DataFrame
        A DataFrame containing data of recovered for last 30 days for all countries available.

    Examples
    --------
    >>> history = obtain_historical_data()
    >>> recovered = organized_historical_recovered(history)
    >>> type(recovered)
    pandas.core.frame.DataFrame
    """
    df = pd.DataFrame(historical_data)
    list_timeline = df['timeline'].values.tolist()
    timeline = pd.DataFrame(list_timeline)
    list_recovered = timeline['recovered'].values.tolist()
    recovered = pd.DataFrame(list_recovered)
    recovered['country'] = df['country']
    recovered_organized = recovered.groupby('country').sum()
    return recovered_organized

def plot_organized_historical_recovered(recovered_organized, query_country):
    """
    This is a function for making time series plot showing how the number of recovered for last 30 days changes for the specific countru that the user wants to know.

    Parameters (Inputs)
    ----------
    deaths_organized : DataFrame
        The DataFrame generated in previous function containing organized data of recovered
    query_country : str
        The specific country the user wants to get information about

    Returns (Output)
    -------
    plot
        A line plot showing how the number of recovered changes for last 30 days for the specific country users want to know

    Examples
    --------
    >>> history = obtain_historical_data()
    >>> recovered = organized_historical_recovered(history)
    >>> country = 'China'
    >>> plot_organized_historical_recovered(recovered, country)
    will return the line plot
    """
    if query_country in recovered_organized.index:
        query_country_df = recovered_organized.loc[query_country, :]
        query_country_df.transpose().plot(kind='line', subplots=True)
        return plt.show()
    elif query_country not in recovered_organized.index:
        print('Query country is not available')



